package com.employeeManagement.employeeManagement.repository;

import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.GetRequest;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.core.CountRequest;
import org.elasticsearch.client.core.CountResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.io.IOException;

@Repository
public class EmployeeRepository {
    @Autowired
    RestHighLevelClient client;


    //  Upsert Request method for (Insert or Update)
//  If Doument Present with giver id then it will update or if not present any document with this id then it will create new
    public IndexResponse createOrUpdateEmployee(IndexRequest request) throws IOException {
        return client.index(request, RequestOptions.DEFAULT);
    }

    //  Get Docuemt By Given Id
    public GetResponse getEmployeeById(GetRequest request) throws IOException {
//  GetResponse that wll generated by passing GetRequest in RestHighLevelClient
        return client.get(request, RequestOptions.DEFAULT);

    }

    //  Delete Docuemt By Given Id
    public DeleteResponse deleteEmployeeById(DeleteRequest request) throws IOException {

//  Use RestHighLevelClient's delete method to delete any document from Elastic
        return client.delete(request, RequestOptions.DEFAULT);

    }

    //  Get All Data from Giver index
    public SearchResponse getAllEmployee(SearchRequest searchRequest) throws IOException {


//  RestHighLevelClient search() method extend IOException so we need to write it in try catch
        return client.search(searchRequest, RequestOptions.DEFAULT);

    }

    public CountResponse getAllDataCount(CountRequest request) throws IOException {
        return client.count(request, RequestOptions.DEFAULT);
    }
}